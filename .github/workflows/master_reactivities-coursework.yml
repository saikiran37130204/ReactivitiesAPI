name: Build and deploy ASP.Net Core app to Azure Web App - Reactivities-coursework

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      # Checkout main repository
      - uses: actions/checkout@v4

      # Checkout React app from separate repository
      - name: Checkout React app
        uses: actions/checkout@v4
        with:
          repository: saikiran37130204/ReactivitiesClientSide
          path: client-app
          token: ${{ secrets.GITHUB_TOKEN }}

      # Node.js setup with cache verification
      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: 'npm'
          cache-dependency-path: 'client-app/package-lock.json'

      # Verify and handle lock file
      - name: Verify and install dependencies
        working-directory: client-app
        run: |
          # Generate lock file if missing
          if [ ! -f "package-lock.json" ]; then
            echo "Generating package-lock.json..."
            npm install --package-lock-only
          fi
          
          # Install dependencies
          echo "Installing dependencies..."
          npm ci --no-audit
          
          # Verify installation
          echo "Installed dependencies:"
          npm list --depth=0
        shell: bash

      # Build React app with verification
      - name: Build React app
        working-directory: client-app
        run: |
          echo "Building React app..."
          npm run build
          
          # Verify build output
          if [ ! -d "dist" ]; then
            echo "ERROR: Build failed - no dist directory created"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          echo "Build successful. Contents:"
          ls -la dist/
        shell: bash

      # .NET setup
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"

      # Copy React build to wwwroot with verification
      - name: Copy React build
        run: |
          echo "Preparing wwwroot directory..."
          mkdir -p API/wwwroot
          
          echo "Copying build files..."
          cp -r client-app/dist/* API/wwwroot/
          
          # Verify copy operation
          if [ ! -f "API/wwwroot/index.html" ]; then
            echo "ERROR: Failed to copy React build"
            echo "wwwroot contents:"
            ls -la API/wwwroot/
            exit 1
          fi
          
          echo "Files successfully copied:"
          ls -la API/wwwroot/
        shell: bash

      # .NET build and publish
      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_3914583C92DD4E72A608EAB40AAEF26D }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_AA974CF49E4E474F89576C5988ED3FF1 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4735E5C4CB3A4B68906DA55A6D7CCD3E }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "Reactivities-coursework"
          slot-name: "Production"
          package: .